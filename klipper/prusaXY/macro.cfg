# share variables between macros
# can be accessed via {printer["gcode_macro SHARE_VARIABLES"].VARIABLE_NAME}
# can be set with SET_GCODE_VARIABLE MACRO=SHARE_VARIABLES VARIABLE=VARIABLE_NAME VALUE=NEW_VALUE
[gcode_macro SHARE_VARIABLES]
variable_enable_save_config : False
variable_dim_enclosure_led : False
gcode:

[gcode_macro MIN_TEMP_CHECK]
description:Min Temp Check
variable_parameter_MIN_TEMP: 250
gcode: 
    {% if printer.extruder.target != 0 %} # if there is a setpoint for extruder
        {% if printer.extruder.temperature < printer.extruder.target %} # if not reached, heat
            PLAY_LONG_FEEDBACK_SOUND
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={printer.extruder.target|float - 5} MAXIMUM={printer.extruder.target|float + 5}
        {% endif %}
    {% else %} # if no setpoint for extruder, set default value to 250
        PLAY_LONG_FEEDBACK_SOUND
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={params.MIN_TEMP|default(250)|float}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.MIN_TEMP|default(250)|float - 5} MAXIMUM={params.MIN_TEMP|default(250)|float + 5}
    {% endif %}
    PLAY_DOUBLE_FEEDBACK_SOUND
    
# START_PRINT EXTRUDER_TEMP={material_print_temperature_layer_0} BED_TEMP={material_bed_temperature_layer_0} FILAMENT_TYPE={material_type}
[gcode_macro START_PRINT]
variable_parameter_EXTRUDER_TEMP: 190
variable_parameter_BED_TEMP: 60
variable_parameter_FILAMENT_TYPE : "PLA"
gcode:
    UPDATE_DELAYED_GCODE ID=POWER_DOWN DURATION=0 ; clear idle_timeout
    HEAT_SOAK ACTION=STOP
    CLEAR_PAUSE
    M220 S100 ; reset feedrate

    PRINT MSG="Preheat..."
    ; heat up nozzle first incase the blob make homing fail
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={params.EXTRUDER_TEMP|default(200)|float - 25}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.EXTRUDER_TEMP|default(200)|float - 55} MAXIMUM={params.EXTRUDER_TEMP|default(200)|float + 55}
    
    PRINT MSG="Homing..."
    G28
    PRINT MSG="Aligning Z..."
    G34 ; level gantry
    
    ; Absolute Positioning
    G90
    G0 X125 Y105 Z100 F3000
    ; turn on part fan to cooldown the probe
    M106 S255

   
    ;PRINT MSG="Waiting for temperature"
    PRINT MSG="Waiting for bed temp"

    ; preheat nozzle
    ;SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150

    ; set temp and wait for bed
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.BED_TEMP|default(60)|float}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={params.BED_TEMP|default(60)|float - 5} MAXIMUM={params.BED_TEMP|default(60)|float + 5}

    ; part fan off
    M106 S0
    ; then set print nozzle temp and wait
    ;SET_HEATER_TEMPERATURE HEATER=extruder TARGET={params.EXTRUDER_TEMP|default(200)|float}
    ;TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.EXTRUDER_TEMP|default(200)|float - 5} MAXIMUM={params.EXTRUDER_TEMP|default(200)|float + 5}

    PLAY_SINGLE_FEEDBACK_SOUND

    PRINT MSG="Aligning Z..."
    G34 ; level gantry

    G0 X125 Y105 F3000
    PRINT MSG="Homing Z..."
    G28 Z ;re-home Z

    ;SET_GCODE_OFFSET Z=0.525
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE LOAD="default"
    
    FILAMENT_PROFILE FILAMENT_TYPE={params.FILAMENT_TYPE|default("DEFAULT")}

    PROBE_TEMPERATURE_COMPENSATION ACTION=APPLY
    
    ; start print job
    PLAY_DOUBLE_FEEDBACK_SOUND

    G0 X0 Y-2 F3000 ; move outside print area
    G1 Z10 F1000 ;lower Z
    PRINT MSG="Waiting for nozzle temp"
    ; then set print nozzle temp and wait
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={params.EXTRUDER_TEMP|default(200)|float}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.EXTRUDER_TEMP|default(200)|float - 5} MAXIMUM={params.EXTRUDER_TEMP|default(200)|float + 5}
    PRINT MSG="Prime Line"
    G92 E0 ;Reset Extruder
    G1 Z0.6 F1000 ;lower nozzle 
    G1 E10 F300 ; extrude a smal blob
    G92 E0 ;Reset Extruder
    G1 Z0.4 F1000
    G1 X95 E20 F1000 ;Draw the first line
    G92 E0 ;Reset Extruder
    G1 Z0.2 F1000
    G1 X100 F3000 ;Move to side a little
    G1 X175 E10 F1500.0 ;Draw the second line
    G92 E0 ;Reset Extruder
    G1 E1 F300 ; extrude a smal blob
    G1 X200 F500
    G92 E0 ;Reset Extruder
    G1 Z2.0 F1000 ;Move Z Axis up

    ;M221 S93 ; Tunned flow
    PRINT MSG="{printer.print_stats.filename}"

[gcode_macro CANCEL_PRINT]
# rename_existing: CANCEL_PRINT_BASE
gcode:
    M220 S100 ; reset to default speed
    G91 ; relative
    G1 E-2 F300 ; retract
    {% if printer.toolhead.position.z <= 200 %}
        G90
        G0 Z200 F3000
    {% else %}
        G91
        G0 Z5 F3000
    {% endif %}

    G90
    G1 X20 Y210 F3000 ; park toolhead

    PRINT MSG="Aborted!"
    PLAY_LONG_FEEDBACK_SOUND

    PROBE_TEMPERATURE_COMPENSATION ACTION=CLEAR

    CLEAR_PAUSE
    TURN_OFF_HEATERS
    ;M84 ; disable steppers
    M107 ; fan off
    BED_MESH_CLEAR
    ;SET_FILAMENT_SENSOR SENSOR=bear_ir ENABLE=1
    CANCEL_PRINT
    SDCARD_RESET_FILE
    AUTO_SAVE_CONFIG

[gcode_macro RESUME]
# rename_existing: RESUME_OLD
gcode:
    G91
    G92 E0 ;Reset Extruder
    G1 E0.5 F300
    G90
    ;SET_FILAMENT_SENSOR SENSOR=bear_ir ENABLE=1
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    PRINT MSG="{printer.print_stats.filename}"
    RESUME

[gcode_macro PAUSE]
# rename_existing: PAUSE_OLD
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_state
    PAUSE
    G91
    G92 E0 ;Reset Extruder
    G1 E-2 F300
    M125 ; parking
    ;SET_FILAMENT_SENSOR SENSOR=bear_ir ENABLE=0
    PRINT MSG="Paused!"

[gcode_macro PLAY_SINGLE_FEEDBACK_SOUND]
gcode:
    M300 S100 P100
    M300 S1 P100

[gcode_macro PLAY_DOUBLE_FEEDBACK_SOUND]
gcode:
    M300 S100 P100
    M300 S1 P100
    M300 S100 P100
    M300 S1 P100

[gcode_macro PLAY_LONG_FEEDBACK_SOUND]
gcode:
    M300 S100 P1000
    M300 S1 P100


# run on startup
[delayed_gcode INIT]
initial_duration: 1
gcode:
    PRINT MSG="Init..."
    ; enable auto power off on startup, idle_timeout does not trigger if the print deos not start
    UPDATE_DELAYED_GCODE ID=POWER_DOWN DURATION=1800
    ; set deault state of enclosure led
    PRINT MSG="Ready"

# send custom msg
# OUTPUT_TARGET 0 : Both LCD and terminal , 1 : Terminal only , 2 : LCD only
[gcode_macro PRINT]
variable_parameter_MSG : ''
variable_parameter_OUTPUT_TARGET : 0
gcode:
    {% if params.OUTPUT_TARGET|default(0)|int == 0 %}
        M117 {params.MSG | string}
        { action_respond_info((params.MSG) | string)}
    {% elif params.OUTPUT_TARGET|default(0)|int == 1 %}
        { action_respond_info((params.MSG) | string)}
    {% else %}
         M117 {params.MSG | string}
    {% endif %}

[gcode_macro DISPLAY_GCODE_PROGRESS]
variable_parameter_TOTAL_LAYER : 0
variable_parameter_CURRENT_LAYER : 0
variable_parameter_PROGRESS : 0
variable_parameter_REMAIN : "none"
gcode:
    GCODE_PROGRESS TOTAL_LAYER={params.TOTAL_LAYER} CURRENT_LAYER={params.CURRENT_LAYER} PROGRESS={params.PROGRESS} REMAIN={params.REMAIN}

[gcode_macro GCODE_PROGRESS]
variable_parameter_TOTAL_LAYER : 0
variable_parameter_CURRENT_LAYER : 0
variable_parameter_PROGRESS : 0
variable_parameter_REMAIN : "00:00"
variable_total_layer : 0
variable_current_layer : 0
variable_progress : 0
variable_remain : "none"
gcode:
    {% if "TOTAL_LAYER" in params %}
        SET_GCODE_VARIABLE MACRO=GCODE_PROGRESS VARIABLE=total_layer VALUE={ params.TOTAL_LAYER }
    {% else %}
        SET_GCODE_VARIABLE MACRO=GCODE_PROGRESS VARIABLE=total_layer VALUE=0
    {% endif %}

    {% if "CURRENT_LAYER" in params %}
        SET_GCODE_VARIABLE MACRO=GCODE_PROGRESS VARIABLE=current_layer VALUE={ params.CURRENT_LAYER }
    {% else %}
        SET_GCODE_VARIABLE MACRO=GCODE_PROGRESS VARIABLE=current_layer VALUE=0
    {% endif %}

    {% if "PROGRESS" in params %}
        SET_GCODE_VARIABLE MACRO=GCODE_PROGRESS VARIABLE=progress VALUE={ params.PROGRESS }
    {% else %}
        SET_GCODE_VARIABLE MACRO=GCODE_PROGRESS VARIABLE=progress VALUE=0
    {% endif %}

    {% if "REMAIN" in params %}
        SET_GCODE_VARIABLE MACRO=GCODE_PROGRESS VARIABLE=remain VALUE="'{ params.REMAIN }'"
    {% else %}
        SET_GCODE_VARIABLE MACRO=GCODE_PROGRESS VARIABLE=remain VALUE="'00:00'"
    {% endif %}

[gcode_macro FILAMENT_PROFILE]
variable_parameter_FILAMENT_TYPE : "PLA"
description: Set current printing filament parameters
gcode:
  {% if params.FILAMENT_TYPE|default("DEFAULT") == "PLA" %}
    PRINT MSG="Set filament profile : PLA" OUTPUT_TARGET=1
    M221 S100 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.03
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "PETG" %}
    PRINT MSG="Set filament profile : PETG" OUTPUT_TARGET=1
    M221 S100 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.04
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "ABS" %}
    PRINT MSG="Set filament profile : ABS" OUTPUT_TARGET=1
    M221 S100 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.04
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "ASA" %}
    PRINT MSG="Set filament profile : ASA" OUTPUT_TARGET=1
    M221 S100 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.04
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "PC" %}
    PRINT MSG="Set filament profile : PC" OUTPUT_TARGET=1
    M221 S100 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.04
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "PC_CF" %}
    PRINT MSG="Set filament profile : PC_CF" OUTPUT_TARGET=1
    M221 S100 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.04
  {% elif params.FILAMENT_TYPE|default("DEFAULT") == "TEST" %}
    PRINT MSG="Set filament profile : TEST" OUTPUT_TARGET=1
    M221 S100 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.0 
  {% else %}
    PRINT MSG="Set filament profile : Default" OUTPUT_TARGET=1
    M221 S100 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.00
  {% endif %}

[gcode_macro AUTO_SAVE_CONFIG]
description: Save and restart
gcode:
    UPDATE_DELAYED_GCODE ID=DELAY_SAVE_CONFIG DURATION=1

[delayed_gcode DELAY_SAVE_CONFIG]
initial_duration: 0.
gcode:
    {% if printer["gcode_macro SHARE_VARIABLES"].enable_save_config %}
        Z_OFFSET_APPLY_PROBE
        PRINT MSG="Printer will restart and save current configs..." OUTPUT_TARGET=1
        PRINT MSG="Saving..." OUTPUT_TARGET=0
        SAVE_CONFIG
    {% endif %}

[gcode_macro ENABLE_SAVE_CONFIG]
gcode:
    SET_GCODE_VARIABLE MACRO=SHARE_VARIABLES VARIABLE=enable_save_config VALUE=True

[gcode_macro DISABLE_SAVE_CONFIG]
gcode:
    SET_GCODE_VARIABLE MACRO=SHARE_VARIABLES VARIABLE=enable_save_config VALUE=False

[delayed_gcode POWER_DOWN]
initial_duration: 0.
gcode:
    {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
        {% if printer.extruder.temperature < 50 and printer["gcode_macro HEAT_SOAK"].remain_time == 0 %}
            M84 ; disable steppers
            TURN_OFF_HEATERS
            M107 ; turn off fans
            PRINT MSG="Power down."  OUTPUT_TARGET=0
            {action_call_remote_method("set_device_power", device="PSU", state="off")} ; use sonoff to power down
        {% else %}
            TURN_OFF_HEATERS
            M107 ; turn off fans
            UPDATE_DELAYED_GCODE ID=POWER_DOWN DURATION=300 ; extruder still too hot, wait extra 5 mins 
        {% endif %}
    {% endif %}

[gcode_macro FORCE_MOVE_BED]
variable_parameter_DISTANCE: -10
gcode:
    SET_KINEMATIC_POSITION Z=100 ; fake position
    G91 ; Relative positioning
    G0 Z{params.DISTANCE|default(-10)|float}
    G90 ; Absolute positioning
    # M84 ; disable steppers, this will clear current position

[gcode_macro PROBE_TEMPERATURE_COMPENSATION]
description: PROBE_TEMPERATURE_COMPENSATION [ACTION={apply|clear|query}] ; this macro must be called after z axis homed
variable_parameter_ACTION : "query"
variable_probe_min_temp: 30
variable_probe_max_temp: 90
variable_offset_delta: -0.100
variable_calc_offset : 0
gcode:
    {% if "ACTION" in params %}
        {% set action = params.ACTION|lower %}
        {% if action  == "apply" %}
            {% set CURRENT_TEMP = printer["temperature_sensor probe"]["temperature"] %}
            {% set CURRENT_OFFSET = printer.gcode_move.homing_origin.z %}
            PRINT MSG="Probe temp : {CURRENT_TEMP}" OUTPUT_TARGET=1

            {% if calc_offset != 0 %}
                PRINT MSG="Probe temperature compensation offset = {calc_offset}mm is already set, this value will be reset." OUTPUT_TARGET=1
                ;SET_GCODE_OFFSET Z={CURRENT_OFFSET - calc_offset} MOVE=1
                {% set CURRENT_OFFSET = printer.gcode_move.homing_origin.z - calc_offset %}
                SET_GCODE_VARIABLE MACRO=PROBE_TEMPERATURE_COMPENSATION VARIABLE=calc_offset VALUE=0
            {% endif %}

            {% if CURRENT_TEMP <= probe_min_temp %}
                PRINT MSG="Apply probe temperature compensation offset = 0" OUTPUT_TARGET=1
            {% elif CURRENT_TEMP >= probe_max_temp %}
                PRINT MSG="Apply probe temperature compensation offset = { offset_delta }mm" OUTPUT_TARGET=1
                SET_GCODE_VARIABLE MACRO=PROBE_TEMPERATURE_COMPENSATION VARIABLE=calc_offset VALUE={offset_delta}
                SET_GCODE_OFFSET Z={CURRENT_OFFSET + offset_delta} MOVE=1
            {% else %}
                {% set TMP_CALC_OFFSET = ((CURRENT_TEMP - probe_min_temp)/(probe_max_temp - probe_min_temp)*offset_delta)|float|round(3) %}
                PRINT MSG="Apply probe temperature compensation offset = { TMP_CALC_OFFSET }mm" OUTPUT_TARGET=1
                SET_GCODE_VARIABLE MACRO=PROBE_TEMPERATURE_COMPENSATION VARIABLE=calc_offset VALUE={TMP_CALC_OFFSET}
                SET_GCODE_OFFSET Z={CURRENT_OFFSET + TMP_CALC_OFFSET} MOVE=1
            {% endif %}

        {% elif action  == "clear" %}
            {% if calc_offset != 0 %}
                {% set CURRENT_OFFSET = printer.gcode_move.homing_origin.z %}
                PRINT MSG="Clear probe temperature compensation offset = { calc_offset }mm" OUTPUT_TARGET=1
                SET_GCODE_OFFSET Z={CURRENT_OFFSET - calc_offset} MOVE=1
                SET_GCODE_VARIABLE MACRO=PROBE_TEMPERATURE_COMPENSATION VARIABLE=calc_offset VALUE=0
            {% else %}
                PRINT MSG="Probe temperature compensation offset : There is no offset to clear!" OUTPUT_TARGET=1
            {% endif %}

        {% elif action  == "query" %}
            PRINT MSG="Probe temperature compensation offset = { calc_offset }" OUTPUT_TARGET=1
        {% else %}
            PRINT MSG="Probe temperature compensation offset : Invalid action!" OUTPUT_TARGET=1
        {% endif %}
    {% else %}
        PRINT MSG="Probe temperature compensation offset : No action!" OUTPUT_TARGET=1
    {% endif %}

[gcode_macro DUMP_VARS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
        {% if (name1 != "configfile") and (name1 != "bed_mesh" and name2!="mesh_matrix") and (name1 != "mcu" and name2!="mcu_constants") and (name1 != "mcu" and name2!="last_stats") and (name2 != "color_data") and (andm1 != "gcode_macro") %}
            { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
        {% else %}
            { action_respond_info("printer['%s'].%s = %s" % (name1, name2, "...")) }
        {% endif %}
      {% endfor %}
   {% endfor %}

[gcode_macro HEAT_SOAK]
description: HEAT_SOAK [ACTION={start|stop|query}] DURATION={30} BED_TEMP={110}
variable_parameter_DURATION : 30
variable_parameter_ACTION : "start"
variable_parameter_BED_TEMP : 110
variable_remain_time : 0
variable_bed_temp: 0
gcode:
    {% set action = params.ACTION|default("start")|lower %}
    {% if action  == "start" %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=remain_time VALUE={params.DURATION|default(60)|int}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=bed_temp VALUE={params.BED_TEMP|default(110)|int}
        G28
        G90
        G0 X90 Y90 F3000
        G0 Z100 F1000
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.BED_TEMP|default(110)|int}
        UPDATE_DELAYED_GCODE ID=HEAT_SOAK_THREAD DURATION=1
    {% elif action  == "stop" %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=remain_time VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=bed_temp VALUE=0
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
        UPDATE_DELAYED_GCODE ID=HEAT_SOAK_THREAD DURATION=0
    {% elif action  == "query" %}
        {% if remain_time > 0 %}
            PRINT MSG="Heat soak : running. Remain time {remain_time} , Bed temp : {printer.heater_bed.temperature}/{bed_temp}, Chanber temp : {printer['temperature_sensor chamber'].temperature}" OUTPUT_TARGET=1
        {% else %}
            PRINT MSG="Heat soak : stopped." OUTPUT_TARGET=1
        {% endif %}
    {% else %}
        PRINT MSG="Heat soak : Invalid action!, the current HEAT_SOAK task will be canceled." OUTPUT_TARGET=1
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=remain_time VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=bed_temp VALUE=0
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
        UPDATE_DELAYED_GCODE ID=HEAT_SOAK_THREAD DURATION=0
    {% endif %}


[delayed_gcode HEAT_SOAK_THREAD]
initial_duration: 0.
gcode:
    {% if printer["gcode_macro HEAT_SOAK"].remain_time > 0 %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={printer["gcode_macro HEAT_SOAK"].bed_temp}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=remain_time VALUE={printer["gcode_macro HEAT_SOAK"].remain_time -1}
        PRINT MSG="Heat soak({printer["gcode_macro HEAT_SOAK"].remain_time}m)" OUTPUT_TARGET=0
        UPDATE_DELAYED_GCODE ID=HEAT_SOAK_THREAD DURATION=60
    {% else %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=remain_time VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=bed_temp VALUE=0
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
        PRINT MSG="Heat soak ended! Chanber temp : {printer['temperature_sensor chamber'].temperature}" OUTPUT_TARGET=1
        UPDATE_DELAYED_GCODE ID=HEAT_SOAK_THREAD DURATION=0
    {% endif %}